
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000356  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080009a  0080009a  00000424  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000006e  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003f0  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017f  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000353  00000000  00000000  00000a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000136  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e3  00000000  00000000  00000f0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e9       	ldi	r26, 0x9A	; 154
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 39       	cpi	r26, 0x9F	; 159
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  8a:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCDcommand>:
}


void LCDcommand(char data)
{
	LCD_PORT = (((data >> 4) & 0x0F)|LCD_EN|type); 
  92:	30 91 9a 00 	lds	r19, 0x009A
  96:	98 2f       	mov	r25, r24
  98:	92 95       	swap	r25
  9a:	9f 70       	andi	r25, 0x0F	; 15
  9c:	93 2b       	or	r25, r19
  9e:	29 2f       	mov	r18, r25
  a0:	20 62       	ori	r18, 0x20	; 32
  a2:	28 bb       	out	0x18, r18	; 24
	LCD_PORT = (((data >> 4) & 0x0F)|type); 
  a4:	98 bb       	out	0x18, r25	; 24
	LCD_PORT = ((data & 0x0F)|LCD_EN|type); 
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	93 2f       	mov	r25, r19
  aa:	90 62       	ori	r25, 0x20	; 32
  ac:	98 2b       	or	r25, r24
  ae:	98 bb       	out	0x18, r25	; 24
	LCD_PORT = ((data & 0x0F)|type); 
  b0:	83 2b       	or	r24, r19
  b2:	88 bb       	out	0x18, r24	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	80 e9       	ldi	r24, 0x90	; 144
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCDcommand+0x26>
	_delay_us(200);
}
  bc:	08 95       	ret

000000be <LCDdata>:
}



void LCDdata(char *data)
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
	type = LCD_RS;
  c2:	20 e1       	ldi	r18, 0x10	; 16
  c4:	20 93 9a 00 	sts	0x009A, r18
  c8:	ec 01       	movw	r28, r24
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <LCDdata+0x12>
	for(int i=0;data[i]!=0;i++)
	LCDcommand(data[i]);
  cc:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>


void LCDdata(char *data)
{
	type = LCD_RS;
	for(int i=0;data[i]!=0;i++)
  d0:	89 91       	ld	r24, Y+
  d2:	88 23       	and	r24, r24
  d4:	d9 f7       	brne	.-10     	; 0xcc <LCDdata+0xe>
	LCDcommand(data[i]);
	type =0x00;
  d6:	10 92 9a 00 	sts	0x009A, r1
}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <LCDinitialize>:
void LCDdata(char *data);
void LCDcommand(char data);

void LCDinitialize(void)
{
	DDRB = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 bb       	out	0x17, r24	; 23
	LCD_PORT = 0xFF;
  e4:	88 bb       	out	0x18, r24	; 24
  e6:	80 e4       	ldi	r24, 0x40	; 64
  e8:	9c e9       	ldi	r25, 0x9C	; 156
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCDinitialize+0xa>
	_delay_ms(20);
	LCD_PORT = 0x03+LCD_EN;
  ee:	93 e2       	ldi	r25, 0x23	; 35
  f0:	98 bb       	out	0x18, r25	; 24
	LCD_PORT = 0x03;
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	e0 e2       	ldi	r30, 0x20	; 32
  f8:	fe e4       	ldi	r31, 0x4E	; 78
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCDinitialize+0x1a>
	_delay_ms(10);
	LCD_PORT = 0x03+LCD_EN;
  fe:	98 bb       	out	0x18, r25	; 24
	LCD_PORT = 0x03;
 100:	88 bb       	out	0x18, r24	; 24
 102:	20 ed       	ldi	r18, 0xD0	; 208
 104:	37 e0       	ldi	r19, 0x07	; 7
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCDinitialize+0x28>
	_delay_ms(1);
	LCD_PORT = 0x03+LCD_EN;
 10c:	98 bb       	out	0x18, r25	; 24
	LCD_PORT = 0x03;
 10e:	88 bb       	out	0x18, r24	; 24
 110:	c9 01       	movw	r24, r18
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCDinitialize+0x32>
	_delay_ms(1);
	LCD_PORT = 0x02+LCD_EN;
 116:	82 e2       	ldi	r24, 0x22	; 34
 118:	88 bb       	out	0x18, r24	; 24
	LCD_PORT = 0x02;
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	c9 01       	movw	r24, r18
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCDinitialize+0x40>
	_delay_ms(1);		  
	LCDcommand(0x28);		// 4-bit mode – 2 line – 5x7 font. 
 124:	88 e2       	ldi	r24, 0x28	; 40
 126:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>
	LCDcommand(0x0C);		// Display on cursor – no blink. 
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>
	LCDcommand(0x06);		// Automatic Increment – No Display shift.
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>
	LCDcommand(0x01);		// Clear Screen
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>
	LCDcommand(0x80);		// Address DDRAM with 0 offset 80h. 
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>

}
 142:	08 95       	ret

00000144 <__vector_16>:
	}
	
}	

ISR(ADC_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	
	itoa(ADCH,ADCvalue,10);
 166:	85 b1       	in	r24, 0x05	; 5
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	6b e9       	ldi	r22, 0x9B	; 155
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	4a e0       	ldi	r20, 0x0A	; 10
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	0e 94 78 01 	call	0x2f0	; 0x2f0 <itoa>
	
	OCR2 = ADCH;
 176:	85 b1       	in	r24, 0x05	; 5
 178:	83 bd       	out	0x23, r24	; 35
	
	ADCSRA |= 1<<ADSC;
 17a:	36 9a       	sbi	0x06, 6	; 6

}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <main>:
#include <lcd.h>

char ADCvalue[4];

int main(void)
{
 19e:	bf 92       	push	r11
 1a0:	cf 92       	push	r12
 1a2:	df 92       	push	r13
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	df 93       	push	r29
 1ae:	cf 93       	push	r28
 1b0:	00 d0       	rcall	.+0      	; 0x1b2 <main+0x14>
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <main+0x16>
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 
//***********************TEST PROGRAM****************************
	
	LCDinitialize();
 1b8:	0e 94 70 00 	call	0xe0	; 0xe0 <LCDinitialize>
	
	sei(); // Enable Global Interrupts
 1bc:	78 94       	sei
	
	ADMUX = 0b01100001;
 1be:	81 e6       	ldi	r24, 0x61	; 97
 1c0:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA = 0b11001100; //ADEN, ADSC, ADIE, ASPS2
 1c2:	8c ec       	ldi	r24, 0xCC	; 204
 1c4:	86 b9       	out	0x06, r24	; 6
	
	//PWM setup
	
	DDRD = 0xff;
 1c6:	9f ef       	ldi	r25, 0xFF	; 255
 1c8:	91 bb       	out	0x11, r25	; 17
	
	TCCR2 = 0b01101001; // WGM20, COM21, WGM21, CS20
 1ca:	89 e6       	ldi	r24, 0x69	; 105
 1cc:	85 bd       	out	0x25, r24	; 37
	
	TCNT2 = 0b11111111;
 1ce:	94 bd       	out	0x24, r25	; 36
	
	//OCR2 = 0b00001111;
	//TCCR1B = 0b00001001; // WGM12, CS10
	
	
	LCDdata("Green Technology");
 1d0:	80 e6       	ldi	r24, 0x60	; 96
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 5f 00 	call	0xbe	; 0xbe <LCDdata>
	LCDcommand(0x80+70);
 1d8:	86 ec       	ldi	r24, 0xC6	; 198
 1da:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>
	LCDdata("Sputnitz");
 1de:	81 e7       	ldi	r24, 0x71	; 113
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 5f 00 	call	0xbe	; 0xbe <LCDdata>
 1e6:	80 e4       	ldi	r24, 0x40	; 64
 1e8:	9c e9       	ldi	r25, 0x9C	; 156
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x4c>
	
	_delay_ms(20);
	LCDcommand(0x01);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>
 1f4:	00 e0       	ldi	r16, 0x00	; 0
 1f6:	10 e0       	ldi	r17, 0x00	; 0
		
		LCDcommand(0x80+8);
		LCDdata("PWM%=   ");
		LCDcommand(0x80+13);
		temp = 100 * ADCH / 255; 
		itoa(temp,pwm,10);
 1f8:	94 e6       	ldi	r25, 0x64	; 100
 1fa:	b9 2e       	mov	r11, r25
 1fc:	6e 01       	movw	r12, r28
 1fe:	08 94       	sec
 200:	c1 1c       	adc	r12, r1
 202:	d1 1c       	adc	r13, r1
		LCDdata(pwm);
		
		temp=ADCH - prv, prv=ADCH;
		itoa(temp,change,10);
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	e8 2e       	mov	r14, r24
 208:	f1 2c       	mov	r15, r1
 20a:	ec 0e       	add	r14, r28
 20c:	fd 1e       	adc	r15, r29
	char pwm[2];
	char change[2];
	
	while(1)
	{
		LCDcommand(0x80);
 20e:	80 e8       	ldi	r24, 0x80	; 128
 210:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>
		LCDdata("ADC=    ");
 214:	8a e7       	ldi	r24, 0x7A	; 122
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 5f 00 	call	0xbe	; 0xbe <LCDdata>
		LCDcommand(0x80+4); 
 21c:	84 e8       	ldi	r24, 0x84	; 132
 21e:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>
		LCDdata(ADCvalue);
 222:	8b e9       	ldi	r24, 0x9B	; 155
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 5f 00 	call	0xbe	; 0xbe <LCDdata>
		
		LCDcommand(0x80+8);
 22a:	88 e8       	ldi	r24, 0x88	; 136
 22c:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>
		LCDdata("PWM%=   ");
 230:	83 e8       	ldi	r24, 0x83	; 131
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 5f 00 	call	0xbe	; 0xbe <LCDdata>
		LCDcommand(0x80+13);
 238:	8d e8       	ldi	r24, 0x8D	; 141
 23a:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>
		temp = 100 * ADCH / 255; 
 23e:	85 b1       	in	r24, 0x05	; 5
		itoa(temp,pwm,10);
 240:	8b 9d       	mul	r24, r11
 242:	c0 01       	movw	r24, r0
 244:	11 24       	eor	r1, r1
 246:	6f ef       	ldi	r22, 0xFF	; 255
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <__divmodhi4>
 24e:	cb 01       	movw	r24, r22
 250:	b6 01       	movw	r22, r12
 252:	4a e0       	ldi	r20, 0x0A	; 10
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	0e 94 78 01 	call	0x2f0	; 0x2f0 <itoa>
		LCDdata(pwm);
 25a:	c6 01       	movw	r24, r12
 25c:	0e 94 5f 00 	call	0xbe	; 0xbe <LCDdata>
		
		temp=ADCH - prv, prv=ADCH;
 260:	85 b1       	in	r24, 0x05	; 5
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	80 1b       	sub	r24, r16
 266:	91 0b       	sbc	r25, r17
 268:	25 b1       	in	r18, 0x05	; 5
 26a:	02 2f       	mov	r16, r18
 26c:	10 e0       	ldi	r17, 0x00	; 0
		itoa(temp,change,10);
 26e:	b7 01       	movw	r22, r14
 270:	4a e0       	ldi	r20, 0x0A	; 10
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	0e 94 78 01 	call	0x2f0	; 0x2f0 <itoa>
		
		LCDcommand(0x80+64);
 278:	80 ec       	ldi	r24, 0xC0	; 192
 27a:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>
		LCDdata("d/dt=   ");
 27e:	8c e8       	ldi	r24, 0x8C	; 140
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 5f 00 	call	0xbe	; 0xbe <LCDdata>
		
		LCDcommand(0x80+68); 
 286:	84 ec       	ldi	r24, 0xC4	; 196
 288:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>
		LCDdata(change);
 28c:	c7 01       	movw	r24, r14
 28e:	0e 94 5f 00 	call	0xbe	; 0xbe <LCDdata>
		
		LCDcommand(0x80+72);
 292:	88 ec       	ldi	r24, 0xC8	; 200
 294:	0e 94 49 00 	call	0x92	; 0x92 <LCDcommand>
		LCDdata("RPS=");
 298:	85 e9       	ldi	r24, 0x95	; 149
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 5f 00 	call	0xbe	; 0xbe <LCDdata>
 2a0:	b6 cf       	rjmp	.-148    	; 0x20e <main+0x70>

000002a2 <__divmodhi4>:
 2a2:	97 fb       	bst	r25, 7
 2a4:	09 2e       	mov	r0, r25
 2a6:	07 26       	eor	r0, r23
 2a8:	0a d0       	rcall	.+20     	; 0x2be <__divmodhi4_neg1>
 2aa:	77 fd       	sbrc	r23, 7
 2ac:	04 d0       	rcall	.+8      	; 0x2b6 <__divmodhi4_neg2>
 2ae:	0c d0       	rcall	.+24     	; 0x2c8 <__udivmodhi4>
 2b0:	06 d0       	rcall	.+12     	; 0x2be <__divmodhi4_neg1>
 2b2:	00 20       	and	r0, r0
 2b4:	1a f4       	brpl	.+6      	; 0x2bc <__divmodhi4_exit>

000002b6 <__divmodhi4_neg2>:
 2b6:	70 95       	com	r23
 2b8:	61 95       	neg	r22
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255

000002bc <__divmodhi4_exit>:
 2bc:	08 95       	ret

000002be <__divmodhi4_neg1>:
 2be:	f6 f7       	brtc	.-4      	; 0x2bc <__divmodhi4_exit>
 2c0:	90 95       	com	r25
 2c2:	81 95       	neg	r24
 2c4:	9f 4f       	sbci	r25, 0xFF	; 255
 2c6:	08 95       	ret

000002c8 <__udivmodhi4>:
 2c8:	aa 1b       	sub	r26, r26
 2ca:	bb 1b       	sub	r27, r27
 2cc:	51 e1       	ldi	r21, 0x11	; 17
 2ce:	07 c0       	rjmp	.+14     	; 0x2de <__udivmodhi4_ep>

000002d0 <__udivmodhi4_loop>:
 2d0:	aa 1f       	adc	r26, r26
 2d2:	bb 1f       	adc	r27, r27
 2d4:	a6 17       	cp	r26, r22
 2d6:	b7 07       	cpc	r27, r23
 2d8:	10 f0       	brcs	.+4      	; 0x2de <__udivmodhi4_ep>
 2da:	a6 1b       	sub	r26, r22
 2dc:	b7 0b       	sbc	r27, r23

000002de <__udivmodhi4_ep>:
 2de:	88 1f       	adc	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	5a 95       	dec	r21
 2e4:	a9 f7       	brne	.-22     	; 0x2d0 <__udivmodhi4_loop>
 2e6:	80 95       	com	r24
 2e8:	90 95       	com	r25
 2ea:	bc 01       	movw	r22, r24
 2ec:	cd 01       	movw	r24, r26
 2ee:	08 95       	ret

000002f0 <itoa>:
 2f0:	fb 01       	movw	r30, r22
 2f2:	9f 01       	movw	r18, r30
 2f4:	e8 94       	clt
 2f6:	42 30       	cpi	r20, 0x02	; 2
 2f8:	c4 f0       	brlt	.+48     	; 0x32a <itoa+0x3a>
 2fa:	45 32       	cpi	r20, 0x25	; 37
 2fc:	b4 f4       	brge	.+44     	; 0x32a <itoa+0x3a>
 2fe:	4a 30       	cpi	r20, 0x0A	; 10
 300:	29 f4       	brne	.+10     	; 0x30c <itoa+0x1c>
 302:	97 fb       	bst	r25, 7
 304:	1e f4       	brtc	.+6      	; 0x30c <itoa+0x1c>
 306:	90 95       	com	r25
 308:	81 95       	neg	r24
 30a:	9f 4f       	sbci	r25, 0xFF	; 255
 30c:	64 2f       	mov	r22, r20
 30e:	77 27       	eor	r23, r23
 310:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__udivmodhi4>
 314:	80 5d       	subi	r24, 0xD0	; 208
 316:	8a 33       	cpi	r24, 0x3A	; 58
 318:	0c f0       	brlt	.+2      	; 0x31c <itoa+0x2c>
 31a:	89 5d       	subi	r24, 0xD9	; 217
 31c:	81 93       	st	Z+, r24
 31e:	cb 01       	movw	r24, r22
 320:	00 97       	sbiw	r24, 0x00	; 0
 322:	a1 f7       	brne	.-24     	; 0x30c <itoa+0x1c>
 324:	16 f4       	brtc	.+4      	; 0x32a <itoa+0x3a>
 326:	5d e2       	ldi	r21, 0x2D	; 45
 328:	51 93       	st	Z+, r21
 32a:	10 82       	st	Z, r1
 32c:	c9 01       	movw	r24, r18
 32e:	0c 94 99 01 	jmp	0x332	; 0x332 <strrev>

00000332 <strrev>:
 332:	dc 01       	movw	r26, r24
 334:	fc 01       	movw	r30, r24
 336:	67 2f       	mov	r22, r23
 338:	71 91       	ld	r23, Z+
 33a:	77 23       	and	r23, r23
 33c:	e1 f7       	brne	.-8      	; 0x336 <strrev+0x4>
 33e:	32 97       	sbiw	r30, 0x02	; 2
 340:	04 c0       	rjmp	.+8      	; 0x34a <strrev+0x18>
 342:	7c 91       	ld	r23, X
 344:	6d 93       	st	X+, r22
 346:	70 83       	st	Z, r23
 348:	62 91       	ld	r22, -Z
 34a:	ae 17       	cp	r26, r30
 34c:	bf 07       	cpc	r27, r31
 34e:	c8 f3       	brcs	.-14     	; 0x342 <strrev+0x10>
 350:	08 95       	ret

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
